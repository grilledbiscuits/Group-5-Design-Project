
BT_connection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023cc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080024d8  080024d8  000034d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800252c  0800252c  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  0800252c  0800252c  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800252c  0800252c  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800252c  0800252c  0000352c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002530  08002530  00003530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002534  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000010  08002544  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002544  000040f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007476  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f4  00000000  00000000  0000b4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  0000caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000505  00000000  00000000  0000d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f84  00000000  00000000  0000d63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000819f  00000000  00000000  000235c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e5b7  00000000  00000000  0002b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9d17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000195c  00000000  00000000  000a9d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ab6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080024c0 	.word	0x080024c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080024c0 	.word	0x080024c0

0800014c <custom_strlen>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
uint32_t custom_strlen(const char *str)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    uint32_t length = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
    while (*str != '\0')
 8000158:	e005      	b.n	8000166 <custom_strlen+0x1a>
    {
        length++;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	3301      	adds	r3, #1
 800015e:	60fb      	str	r3, [r7, #12]
        str++;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	3301      	adds	r3, #1
 8000164:	607b      	str	r3, [r7, #4]
    while (*str != '\0')
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d1f5      	bne.n	800015a <custom_strlen+0xe>
    }
    return length;
 800016e:	68fb      	ldr	r3, [r7, #12]
}
 8000170:	4618      	mov	r0, r3
 8000172:	3714      	adds	r7, #20
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
	...

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b598      	push	{r3, r4, r7, lr}
 800017e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 fa70 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f848 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000188:	f000 f8dc 	bl	8000344 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800018c:	f000 f8b0 	bl	80002f0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000190:	f000 f884 	bl	800029c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, (uint8_t*)demo_string, custom_strlen(demo_string), HAL_MAX_DELAY); //print to any computer serial monitor (use Putty or any serial monitor software for PC)
 8000194:	4b1a      	ldr	r3, [pc, #104]	@ (8000200 <main+0x84>)
 8000196:	681c      	ldr	r4, [r3, #0]
 8000198:	4b19      	ldr	r3, [pc, #100]	@ (8000200 <main+0x84>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4618      	mov	r0, r3
 800019e:	f7ff ffd5 	bl	800014c <custom_strlen>
 80001a2:	4603      	mov	r3, r0
 80001a4:	b29a      	uxth	r2, r3
 80001a6:	f04f 33ff 	mov.w	r3, #4294967295
 80001aa:	4621      	mov	r1, r4
 80001ac:	4815      	ldr	r0, [pc, #84]	@ (8000204 <main+0x88>)
 80001ae:	f001 fa99 	bl	80016e4 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, &recv_char, 1); //UART1 Interrupt call
 80001b2:	2201      	movs	r2, #1
 80001b4:	4914      	ldr	r1, [pc, #80]	@ (8000208 <main+0x8c>)
 80001b6:	4813      	ldr	r0, [pc, #76]	@ (8000204 <main+0x88>)
 80001b8:	f001 fba9 	bl	800190e <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   // Buffer to store received data
	  if (HAL_UART_Receive(&huart1, (uint8_t *)rx_data, sizeof(rx_data), HAL_MAX_DELAY) == HAL_OK)
 80001bc:	f04f 33ff 	mov.w	r3, #4294967295
 80001c0:	2232      	movs	r2, #50	@ 0x32
 80001c2:	4912      	ldr	r1, [pc, #72]	@ (800020c <main+0x90>)
 80001c4:	480f      	ldr	r0, [pc, #60]	@ (8000204 <main+0x88>)
 80001c6:	f001 fb10 	bl	80017ea <HAL_UART_Receive>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d1f5      	bne.n	80001bc <main+0x40>
	         {
		  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)rx_data, custom_strlen(rx_data), HAL_MAX_DELAY);
 80001d0:	480e      	ldr	r0, [pc, #56]	@ (800020c <main+0x90>)
 80001d2:	f7ff ffbb 	bl	800014c <custom_strlen>
 80001d6:	4603      	mov	r3, r0
 80001d8:	b29a      	uxth	r2, r3
 80001da:	f04f 33ff 	mov.w	r3, #4294967295
 80001de:	490b      	ldr	r1, [pc, #44]	@ (800020c <main+0x90>)
 80001e0:	480b      	ldr	r0, [pc, #44]	@ (8000210 <main+0x94>)
 80001e2:	f001 fa7f 	bl	80016e4 <HAL_UART_Transmit>
	             // Process received data only if it's not empty
	             if (custom_strlen(rx_data) > 0)
 80001e6:	4809      	ldr	r0, [pc, #36]	@ (800020c <main+0x90>)
 80001e8:	f7ff ffb0 	bl	800014c <custom_strlen>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0e4      	beq.n	80001bc <main+0x40>
	             {
	            	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2140      	movs	r1, #64	@ 0x40
 80001f6:	4807      	ldr	r0, [pc, #28]	@ (8000214 <main+0x98>)
 80001f8:	f000 fdda 	bl	8000db0 <HAL_GPIO_WritePin>
	  if (HAL_UART_Receive(&huart1, (uint8_t *)rx_data, sizeof(rx_data), HAL_MAX_DELAY) == HAL_OK)
 80001fc:	e7de      	b.n	80001bc <main+0x40>
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000
 8000204:	2000002c 	.word	0x2000002c
 8000208:	200000bc 	.word	0x200000bc
 800020c:	200000c0 	.word	0x200000c0
 8000210:	20000074 	.word	0x20000074
 8000214:	40010800 	.word	0x40010800

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	@ 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	@ 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 f91e 	bl	8002468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800024a:	2300      	movs	r3, #0
 800024c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800024e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0318 	add.w	r3, r7, #24
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fde3 	bl	8000e24 <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000264:	f000 f8dc 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2302      	movs	r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f001 f850 	bl	8001328 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800028e:	f000 f8c7 	bl	8000420 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	@ 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002a0:	4b11      	ldr	r3, [pc, #68]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002a2:	4a12      	ldr	r2, [pc, #72]	@ (80002ec <MX_USART1_UART_Init+0x50>)
 80002a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002a6:	4b10      	ldr	r3, [pc, #64]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002c0:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002c2:	220c      	movs	r2, #12
 80002c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c6:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002d2:	4805      	ldr	r0, [pc, #20]	@ (80002e8 <MX_USART1_UART_Init+0x4c>)
 80002d4:	f001 f9b6 	bl	8001644 <HAL_UART_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002de:	f000 f89f 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	2000002c 	.word	0x2000002c
 80002ec:	40013800 	.word	0x40013800

080002f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f4:	4b11      	ldr	r3, [pc, #68]	@ (800033c <MX_USART2_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	@ (8000340 <MX_USART2_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002fa:	4b10      	ldr	r3, [pc, #64]	@ (800033c <MX_USART2_UART_Init+0x4c>)
 80002fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <MX_USART2_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <MX_USART2_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	@ (800033c <MX_USART2_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b09      	ldr	r3, [pc, #36]	@ (800033c <MX_USART2_UART_Init+0x4c>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	@ (800033c <MX_USART2_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <MX_USART2_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	@ (800033c <MX_USART2_UART_Init+0x4c>)
 8000328:	f001 f98c 	bl	8001644 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000332:	f000 f875 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000074 	.word	0x20000074
 8000340:	40004400 	.word	0x40004400

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4b2d      	ldr	r3, [pc, #180]	@ (8000410 <MX_GPIO_Init+0xcc>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a2c      	ldr	r2, [pc, #176]	@ (8000410 <MX_GPIO_Init+0xcc>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b2a      	ldr	r3, [pc, #168]	@ (8000410 <MX_GPIO_Init+0xcc>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4b27      	ldr	r3, [pc, #156]	@ (8000410 <MX_GPIO_Init+0xcc>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a26      	ldr	r2, [pc, #152]	@ (8000410 <MX_GPIO_Init+0xcc>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b24      	ldr	r3, [pc, #144]	@ (8000410 <MX_GPIO_Init+0xcc>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b21      	ldr	r3, [pc, #132]	@ (8000410 <MX_GPIO_Init+0xcc>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a20      	ldr	r2, [pc, #128]	@ (8000410 <MX_GPIO_Init+0xcc>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b1e      	ldr	r3, [pc, #120]	@ (8000410 <MX_GPIO_Init+0xcc>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000410 <MX_GPIO_Init+0xcc>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000410 <MX_GPIO_Init+0xcc>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <MX_GPIO_Init+0xcc>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0308 	and.w	r3, r3, #8
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2160      	movs	r1, #96	@ 0x60
 80003bc:	4815      	ldr	r0, [pc, #84]	@ (8000414 <MX_GPIO_Init+0xd0>)
 80003be:	f000 fcf7 	bl	8000db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c8:	4b13      	ldr	r3, [pc, #76]	@ (8000418 <MX_GPIO_Init+0xd4>)
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	4811      	ldr	r0, [pc, #68]	@ (800041c <MX_GPIO_Init+0xd8>)
 80003d8:	f000 fb66 	bl	8000aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80003dc:	2360      	movs	r3, #96	@ 0x60
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4808      	ldr	r0, [pc, #32]	@ (8000414 <MX_GPIO_Init+0xd0>)
 80003f4:	f000 fb58 	bl	8000aa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	2028      	movs	r0, #40	@ 0x28
 80003fe:	f000 fa6a 	bl	80008d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000402:	2028      	movs	r0, #40	@ 0x28
 8000404:	f000 fa83 	bl	800090e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000
 8000414:	40010800 	.word	0x40010800
 8000418:	10110000 	.word	0x10110000
 800041c:	40011000 	.word	0x40011000

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <Error_Handler+0x8>

0800042c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a14      	ldr	r2, [pc, #80]	@ (8000488 <HAL_MspInit+0x5c>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b12      	ldr	r3, [pc, #72]	@ (8000488 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <HAL_MspInit+0x5c>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000462:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <HAL_MspInit+0x60>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	@ (800048c <HAL_MspInit+0x60>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b08a      	sub	sp, #40	@ 0x28
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000498:	f107 0318 	add.w	r3, r7, #24
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
	if (huart->Instance == USART1) {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a35      	ldr	r2, [pc, #212]	@ (8000580 <HAL_UART_MspInit+0xf0>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d13a      	bne.n	8000526 <HAL_UART_MspInit+0x96>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 80004b0:	4b34      	ldr	r3, [pc, #208]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a33      	ldr	r2, [pc, #204]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 80004b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b31      	ldr	r3, [pc, #196]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004c4:	617b      	str	r3, [r7, #20]
 80004c6:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	693b      	ldr	r3, [r7, #16]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004e4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e6:	2302      	movs	r3, #2
 80004e8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ea:	2303      	movs	r3, #3
 80004ec:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ee:	f107 0318 	add.w	r3, r7, #24
 80004f2:	4619      	mov	r1, r3
 80004f4:	4824      	ldr	r0, [pc, #144]	@ (8000588 <HAL_UART_MspInit+0xf8>)
 80004f6:	f000 fad7 	bl	8000aa8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004fe:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 0318 	add.w	r3, r7, #24
 800050c:	4619      	mov	r1, r3
 800050e:	481e      	ldr	r0, [pc, #120]	@ (8000588 <HAL_UART_MspInit+0xf8>)
 8000510:	f000 faca 	bl	8000aa8 <HAL_GPIO_Init>

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	2100      	movs	r1, #0
 8000518:	2025      	movs	r0, #37	@ 0x25
 800051a:	f000 f9dc 	bl	80008d6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 800051e:	2025      	movs	r0, #37	@ 0x25
 8000520:	f000 f9f5 	bl	800090e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 8000524:	e028      	b.n	8000578 <HAL_UART_MspInit+0xe8>
	} else if (huart->Instance == USART2) {
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a18      	ldr	r2, [pc, #96]	@ (800058c <HAL_UART_MspInit+0xfc>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d123      	bne.n	8000578 <HAL_UART_MspInit+0xe8>
		__HAL_RCC_USART2_CLK_ENABLE();
 8000530:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	4a13      	ldr	r2, [pc, #76]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 8000536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800053a:	61d3      	str	r3, [r2, #28]
 800053c:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 800053e:	69db      	ldr	r3, [r3, #28]
 8000540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a0d      	ldr	r2, [pc, #52]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <HAL_UART_MspInit+0xf4>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 8000560:	230c      	movs	r3, #12
 8000562:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2302      	movs	r3, #2
 800056a:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0318 	add.w	r3, r7, #24
 8000570:	4619      	mov	r1, r3
 8000572:	4805      	ldr	r0, [pc, #20]	@ (8000588 <HAL_UART_MspInit+0xf8>)
 8000574:	f000 fa98 	bl	8000aa8 <HAL_GPIO_Init>
}
 8000578:	bf00      	nop
 800057a:	3728      	adds	r7, #40	@ 0x28
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40013800 	.word	0x40013800
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800
 800058c:	40004400 	.word	0x40004400

08000590 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <NMI_Handler+0x4>

08000598 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <HardFault_Handler+0x4>

080005a0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <MemManage_Handler+0x4>

080005a8 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b8 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80005e0:	f000 f886 	bl	80006f0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <USART1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80005ec:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <USART1_IRQHandler+0x10>)
 80005ee:	f001 f9b3 	bl	8001958 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000002c 	.word	0x2000002c

080005fc <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000600:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000604:	f000 fbec 	bl	8000de0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000618:	f7ff fff8 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480b      	ldr	r0, [pc, #44]	@ (800064c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800061e:	490c      	ldr	r1, [pc, #48]	@ (8000650 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000620:	4a0c      	ldr	r2, [pc, #48]	@ (8000654 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a09      	ldr	r2, [pc, #36]	@ (8000658 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000634:	4c09      	ldr	r4, [pc, #36]	@ (800065c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000642:	f001 ff19 	bl	8002478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fd99 	bl	800017c <main>
  bx lr
 800064a:	4770      	bx	lr
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000654:	08002534 	.word	0x08002534
  ldr r2, =_sbss
 8000658:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800065c:	200000f8 	.word	0x200000f8

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>
	...

08000664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b08      	ldr	r3, [pc, #32]	@ (800068c <HAL_Init+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	@ (800068c <HAL_Init+0x28>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f923 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f808 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff fed4 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <HAL_InitTick+0x54>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <HAL_InitTick+0x58>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f93b 	bl	800092a <HAL_SYSTICK_Config>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00e      	b.n	80006dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d80a      	bhi.n	80006da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f000 f903 	bl	80008d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4a06      	ldr	r2, [pc, #24]	@ (80006ec <HAL_InitTick+0x5c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004
 80006e8:	2000000c 	.word	0x2000000c
 80006ec:	20000008 	.word	0x20000008

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	@ (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a03      	ldr	r2, [pc, #12]	@ (8000710 <HAL_IncTick+0x20>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	2000000c 	.word	0x2000000c
 8000710:	200000f4 	.word	0x200000f4

08000714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	@ (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	200000f4 	.word	0x200000f4

08000728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000750:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075a:	4a04      	ldr	r2, [pc, #16]	@ (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	60d3      	str	r3, [r2, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <__NVIC_GetPriorityGrouping+0x18>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	f003 0307 	and.w	r3, r3, #7
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	2b00      	cmp	r3, #0
 800079c:	db0b      	blt.n	80007b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f003 021f 	and.w	r2, r3, #31
 80007a4:	4906      	ldr	r1, [pc, #24]	@ (80007c0 <__NVIC_EnableIRQ+0x34>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	095b      	lsrs	r3, r3, #5
 80007ac:	2001      	movs	r0, #1
 80007ae:	fa00 f202 	lsl.w	r2, r0, r2
 80007b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100

080007c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	db0a      	blt.n	80007ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	490c      	ldr	r1, [pc, #48]	@ (8000810 <__NVIC_SetPriority+0x4c>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	0112      	lsls	r2, r2, #4
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	440b      	add	r3, r1
 80007e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ec:	e00a      	b.n	8000804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4908      	ldr	r1, [pc, #32]	@ (8000814 <__NVIC_SetPriority+0x50>)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	f003 030f 	and.w	r3, r3, #15
 80007fa:	3b04      	subs	r3, #4
 80007fc:	0112      	lsls	r2, r2, #4
 80007fe:	b2d2      	uxtb	r2, r2
 8000800:	440b      	add	r3, r1
 8000802:	761a      	strb	r2, [r3, #24]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	@ 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	f1c3 0307 	rsb	r3, r3, #7
 8000832:	2b04      	cmp	r3, #4
 8000834:	bf28      	it	cs
 8000836:	2304      	movcs	r3, #4
 8000838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3304      	adds	r3, #4
 800083e:	2b06      	cmp	r3, #6
 8000840:	d902      	bls.n	8000848 <NVIC_EncodePriority+0x30>
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3b03      	subs	r3, #3
 8000846:	e000      	b.n	800084a <NVIC_EncodePriority+0x32>
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	f04f 32ff 	mov.w	r2, #4294967295
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43da      	mvns	r2, r3
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	401a      	ands	r2, r3
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000860:	f04f 31ff 	mov.w	r1, #4294967295
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	fa01 f303 	lsl.w	r3, r1, r3
 800086a:	43d9      	mvns	r1, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	4313      	orrs	r3, r2
         );
}
 8000872:	4618      	mov	r0, r3
 8000874:	3724      	adds	r7, #36	@ 0x24
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800088c:	d301      	bcc.n	8000892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088e:	2301      	movs	r3, #1
 8000890:	e00f      	b.n	80008b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <SysTick_Config+0x40>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089a:	210f      	movs	r1, #15
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f7ff ff90 	bl	80007c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <SysTick_Config+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <SysTick_Config+0x40>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff2d 	bl	8000728 <__NVIC_SetPriorityGrouping>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e8:	f7ff ff42 	bl	8000770 <__NVIC_GetPriorityGrouping>
 80008ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	6978      	ldr	r0, [r7, #20]
 80008f4:	f7ff ff90 	bl	8000818 <NVIC_EncodePriority>
 80008f8:	4602      	mov	r2, r0
 80008fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff5f 	bl	80007c4 <__NVIC_SetPriority>
}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff35 	bl	800078c <__NVIC_EnableIRQ>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ffa2 	bl	800087c <SysTick_Config>
 8000938:	4603      	mov	r3, r0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_DMA_Abort>:
 * @brief  Abort the DMA Transfer.
 * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
 8000942:	b480      	push	{r7}
 8000944:	b085      	sub	sp, #20
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	73fb      	strb	r3, [r7, #15]

	if (hdma->State != HAL_DMA_STATE_BUSY) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b02      	cmp	r3, #2
 8000958:	d008      	beq.n	800096c <HAL_DMA_Abort+0x2a>
		/* no transfer ongoing */
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2204      	movs	r2, #4
 800095e:	639a      	str	r2, [r3, #56]	@ 0x38

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2020 	strb.w	r2, [r3, #32]

		return HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	e020      	b.n	80009ae <HAL_DMA_Abort+0x6c>
	} else

	{
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f022 020e 	bic.w	r2, r2, #14
 800097a:	601a      	str	r2, [r3, #0]

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f022 0201 	bic.w	r2, r2, #1
 800098a:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	605a      	str	r2, [r3, #4]
	}
	/* Change the DMA state */
	hdma->State = HAL_DMA_STATE_READY;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2201      	movs	r2, #1
 80009a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* Process Unlocked */
	__HAL_UNLOCK(hdma);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2020 	strb.w	r2, [r3, #32]

	return status;
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <HAL_DMA_Abort_IT>:
 * @brief  Aborts the DMA Transfer in Interrupt mode.
 * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
 *                 the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]

	if (HAL_DMA_STATE_BUSY != hdma->State) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d005      	beq.n	80009dc <HAL_DMA_Abort_IT+0x24>
		/* no transfer ongoing */
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2204      	movs	r2, #4
 80009d4:	639a      	str	r2, [r3, #56]	@ 0x38

		status = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e051      	b.n	8000a80 <HAL_DMA_Abort_IT+0xc8>
	} else {
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 020e 	bic.w	r2, r2, #14
 80009ea:	601a      	str	r2, [r3, #0]

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f022 0201 	bic.w	r2, r2, #1
 80009fa:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <HAL_DMA_Abort_IT+0xd4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d029      	beq.n	8000a5a <HAL_DMA_Abort_IT+0xa2>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a21      	ldr	r2, [pc, #132]	@ (8000a90 <HAL_DMA_Abort_IT+0xd8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d022      	beq.n	8000a56 <HAL_DMA_Abort_IT+0x9e>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1f      	ldr	r2, [pc, #124]	@ (8000a94 <HAL_DMA_Abort_IT+0xdc>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d01a      	beq.n	8000a50 <HAL_DMA_Abort_IT+0x98>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a98 <HAL_DMA_Abort_IT+0xe0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d012      	beq.n	8000a4a <HAL_DMA_Abort_IT+0x92>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <HAL_DMA_Abort_IT+0xe4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d00a      	beq.n	8000a44 <HAL_DMA_Abort_IT+0x8c>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa0 <HAL_DMA_Abort_IT+0xe8>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d102      	bne.n	8000a3e <HAL_DMA_Abort_IT+0x86>
 8000a38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a3c:	e00e      	b.n	8000a5c <HAL_DMA_Abort_IT+0xa4>
 8000a3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a42:	e00b      	b.n	8000a5c <HAL_DMA_Abort_IT+0xa4>
 8000a44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a48:	e008      	b.n	8000a5c <HAL_DMA_Abort_IT+0xa4>
 8000a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4e:	e005      	b.n	8000a5c <HAL_DMA_Abort_IT+0xa4>
 8000a50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a54:	e002      	b.n	8000a5c <HAL_DMA_Abort_IT+0xa4>
 8000a56:	2310      	movs	r3, #16
 8000a58:	e000      	b.n	8000a5c <HAL_DMA_Abort_IT+0xa4>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4a11      	ldr	r2, [pc, #68]	@ (8000aa4 <HAL_DMA_Abort_IT+0xec>)
 8000a5e:	6053      	str	r3, [r2, #4]

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2201      	movs	r2, #1
 8000a64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2020 	strb.w	r2, [r3, #32]

		/* Call User Abort callback */
		if (hdma->XferAbortCallback != NULL) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_DMA_Abort_IT+0xc8>
			hdma->XferAbortCallback(hdma);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	4798      	blx	r3
		}
	}
	return status;
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40020008 	.word	0x40020008
 8000a90:	4002001c 	.word	0x4002001c
 8000a94:	40020030 	.word	0x40020030
 8000a98:	40020044 	.word	0x40020044
 8000a9c:	40020058 	.word	0x40020058
 8000aa0:	4002006c 	.word	0x4002006c
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <HAL_GPIO_Init>:
 * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b08b      	sub	sp, #44	@ 0x2c
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t ioposition;
	uint32_t iocurrent;
	uint32_t temp;
	uint32_t config = 0x00u;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8000aba:	e169      	b.n	8000d90 <HAL_GPIO_Init+0x2e8>
		/* Get the IO position */
		ioposition = (0x01uL << position);
 8000abc:	2201      	movs	r2, #1
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	61fb      	str	r3, [r7, #28]

		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	69fa      	ldr	r2, [r7, #28]
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]

		if (iocurrent == ioposition) {
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f040 8158 	bne.w	8000d8a <HAL_GPIO_Init+0x2e2>
			/* Check the Alternate function parameters */
			assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

			/* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
			switch (GPIO_Init->Mode) {
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	4a9a      	ldr	r2, [pc, #616]	@ (8000d48 <HAL_GPIO_Init+0x2a0>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d05e      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
 8000ae4:	4a98      	ldr	r2, [pc, #608]	@ (8000d48 <HAL_GPIO_Init+0x2a0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d875      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000aea:	4a98      	ldr	r2, [pc, #608]	@ (8000d4c <HAL_GPIO_Init+0x2a4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d058      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
 8000af0:	4a96      	ldr	r2, [pc, #600]	@ (8000d4c <HAL_GPIO_Init+0x2a4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d86f      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000af6:	4a96      	ldr	r2, [pc, #600]	@ (8000d50 <HAL_GPIO_Init+0x2a8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d052      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
 8000afc:	4a94      	ldr	r2, [pc, #592]	@ (8000d50 <HAL_GPIO_Init+0x2a8>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d869      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000b02:	4a94      	ldr	r2, [pc, #592]	@ (8000d54 <HAL_GPIO_Init+0x2ac>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d04c      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
 8000b08:	4a92      	ldr	r2, [pc, #584]	@ (8000d54 <HAL_GPIO_Init+0x2ac>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d863      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000b0e:	4a92      	ldr	r2, [pc, #584]	@ (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d046      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
 8000b14:	4a90      	ldr	r2, [pc, #576]	@ (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d85d      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000b1a:	2b12      	cmp	r3, #18
 8000b1c:	d82a      	bhi.n	8000b74 <HAL_GPIO_Init+0xcc>
 8000b1e:	2b12      	cmp	r3, #18
 8000b20:	d859      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000b22:	a201      	add	r2, pc, #4	@ (adr r2, 8000b28 <HAL_GPIO_Init+0x80>)
 8000b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b28:	08000ba3 	.word	0x08000ba3
 8000b2c:	08000b7d 	.word	0x08000b7d
 8000b30:	08000b8f 	.word	0x08000b8f
 8000b34:	08000bd1 	.word	0x08000bd1
 8000b38:	08000bd7 	.word	0x08000bd7
 8000b3c:	08000bd7 	.word	0x08000bd7
 8000b40:	08000bd7 	.word	0x08000bd7
 8000b44:	08000bd7 	.word	0x08000bd7
 8000b48:	08000bd7 	.word	0x08000bd7
 8000b4c:	08000bd7 	.word	0x08000bd7
 8000b50:	08000bd7 	.word	0x08000bd7
 8000b54:	08000bd7 	.word	0x08000bd7
 8000b58:	08000bd7 	.word	0x08000bd7
 8000b5c:	08000bd7 	.word	0x08000bd7
 8000b60:	08000bd7 	.word	0x08000bd7
 8000b64:	08000bd7 	.word	0x08000bd7
 8000b68:	08000bd7 	.word	0x08000bd7
 8000b6c:	08000b85 	.word	0x08000b85
 8000b70:	08000b99 	.word	0x08000b99
 8000b74:	4a79      	ldr	r2, [pc, #484]	@ (8000d5c <HAL_GPIO_Init+0x2b4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d013      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
				config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
				break;

				/* Parameters are checked with assert_param */
			default:
				break;
 8000b7a:	e02c      	b.n	8000bd6 <HAL_GPIO_Init+0x12e>
				config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	623b      	str	r3, [r7, #32]
				break;
 8000b82:	e029      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	623b      	str	r3, [r7, #32]
				break;
 8000b8c:	e024      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	3308      	adds	r3, #8
 8000b94:	623b      	str	r3, [r7, #32]
				break;
 8000b96:	e01f      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	330c      	adds	r3, #12
 8000b9e:	623b      	str	r3, [r7, #32]
				break;
 8000ba0:	e01a      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
				if (GPIO_Init->Pull == GPIO_NOPULL) {
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d102      	bne.n	8000bb0 <HAL_GPIO_Init+0x108>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000baa:	2304      	movs	r3, #4
 8000bac:	623b      	str	r3, [r7, #32]
				break;
 8000bae:	e013      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
				} else if (GPIO_Init->Pull == GPIO_PULLUP) {
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d105      	bne.n	8000bc4 <HAL_GPIO_Init+0x11c>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	623b      	str	r3, [r7, #32]
					GPIOx->BSRR = ioposition;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	611a      	str	r2, [r3, #16]
				break;
 8000bc2:	e009      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	623b      	str	r3, [r7, #32]
					GPIOx->BRR = ioposition;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	615a      	str	r2, [r3, #20]
				break;
 8000bce:	e003      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
				config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
				break;
 8000bd4:	e000      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
				break;
 8000bd6:	bf00      	nop
			}

			/* Check if the current bit belongs to first half or last half of the pin count number
			 in order to address CRH or CRL register*/
			configregister =
					(iocurrent < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	2bff      	cmp	r3, #255	@ 0xff
 8000bdc:	d801      	bhi.n	8000be2 <HAL_GPIO_Init+0x13a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	e001      	b.n	8000be6 <HAL_GPIO_Init+0x13e>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3304      	adds	r3, #4
			configregister =
 8000be6:	617b      	str	r3, [r7, #20]
			registeroffset =
					(iocurrent < GPIO_PIN_8) ?
							(position << 2u) : ((position - 8u) << 2u);
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	2bff      	cmp	r3, #255	@ 0xff
 8000bec:	d802      	bhi.n	8000bf4 <HAL_GPIO_Init+0x14c>
 8000bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	e002      	b.n	8000bfa <HAL_GPIO_Init+0x152>
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf6:	3b08      	subs	r3, #8
 8000bf8:	009b      	lsls	r3, r3, #2
			registeroffset =
 8000bfa:	613b      	str	r3, [r7, #16]

			/* Apply the new configuration of the pin to the register */
			MODIFY_REG((*configregister),
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	210f      	movs	r1, #15
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	6a39      	ldr	r1, [r7, #32]
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	431a      	orrs	r2, r3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	601a      	str	r2, [r3, #0]
					((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset),
					(config << registeroffset));

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 80b1 	beq.w	8000d8a <HAL_GPIO_Init+0x2e2>
				/* Enable AFIO Clock */
				__HAL_RCC_AFIO_CLK_ENABLE();
 8000c28:	4b4d      	ldr	r3, [pc, #308]	@ (8000d60 <HAL_GPIO_Init+0x2b8>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d60 <HAL_GPIO_Init+0x2b8>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b4a      	ldr	r3, [pc, #296]	@ (8000d60 <HAL_GPIO_Init+0x2b8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
				temp = AFIO->EXTICR[position >> 2u];
 8000c40:	4a48      	ldr	r2, [pc, #288]	@ (8000d64 <HAL_GPIO_Init+0x2bc>)
 8000c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	3302      	adds	r3, #2
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	60fb      	str	r3, [r7, #12]
				CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	220f      	movs	r2, #15
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
				SET_BIT(temp,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a40      	ldr	r2, [pc, #256]	@ (8000d68 <HAL_GPIO_Init+0x2c0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d013      	beq.n	8000c94 <HAL_GPIO_Init+0x1ec>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d6c <HAL_GPIO_Init+0x2c4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d00d      	beq.n	8000c90 <HAL_GPIO_Init+0x1e8>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a3e      	ldr	r2, [pc, #248]	@ (8000d70 <HAL_GPIO_Init+0x2c8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d007      	beq.n	8000c8c <HAL_GPIO_Init+0x1e4>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d101      	bne.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e006      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c88:	2304      	movs	r3, #4
 8000c8a:	e004      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e002      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c90:	2301      	movs	r3, #1
 8000c92:	e000      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c94:	2300      	movs	r3, #0
 8000c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c98:	f002 0203 	and.w	r2, r2, #3
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	4093      	lsls	r3, r2
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
						(GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
				AFIO->EXTICR[position >> 2u] = temp;
 8000ca6:	492f      	ldr	r1, [pc, #188]	@ (8000d64 <HAL_GPIO_Init+0x2bc>)
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Enable or disable the rising trigger */
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <HAL_GPIO_Init+0x226>
					SET_BIT(EXTI->RTSR, iocurrent);
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	492c      	ldr	r1, [pc, #176]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	608b      	str	r3, [r1, #8]
 8000ccc:	e006      	b.n	8000cdc <HAL_GPIO_Init+0x234>
				} else {
					CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cce:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	4928      	ldr	r1, [pc, #160]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	608b      	str	r3, [r1, #8]
				}

				/* Enable or disable the falling trigger */
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d006      	beq.n	8000cf6 <HAL_GPIO_Init+0x24e>
					SET_BIT(EXTI->FTSR, iocurrent);
 8000ce8:	4b23      	ldr	r3, [pc, #140]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	4922      	ldr	r1, [pc, #136]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60cb      	str	r3, [r1, #12]
 8000cf4:	e006      	b.n	8000d04 <HAL_GPIO_Init+0x25c>
				} else {
					CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cf6:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	68da      	ldr	r2, [r3, #12]
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	491e      	ldr	r1, [pc, #120]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	60cb      	str	r3, [r1, #12]
				}

				/* Configure the event mask */
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d006      	beq.n	8000d1e <HAL_GPIO_Init+0x276>
					SET_BIT(EXTI->EMR, iocurrent);
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	4918      	ldr	r1, [pc, #96]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	604b      	str	r3, [r1, #4]
 8000d1c:	e006      	b.n	8000d2c <HAL_GPIO_Init+0x284>
				} else {
					CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	4914      	ldr	r1, [pc, #80]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d28:	4013      	ands	r3, r2
 8000d2a:	604b      	str	r3, [r1, #4]
				}

				/* Configure the interrupt mask */
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d021      	beq.n	8000d7c <HAL_GPIO_Init+0x2d4>
					SET_BIT(EXTI->IMR, iocurrent);
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	490e      	ldr	r1, [pc, #56]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	600b      	str	r3, [r1, #0]
 8000d44:	e021      	b.n	8000d8a <HAL_GPIO_Init+0x2e2>
 8000d46:	bf00      	nop
 8000d48:	10320000 	.word	0x10320000
 8000d4c:	10310000 	.word	0x10310000
 8000d50:	10220000 	.word	0x10220000
 8000d54:	10210000 	.word	0x10210000
 8000d58:	10120000 	.word	0x10120000
 8000d5c:	10110000 	.word	0x10110000
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010000 	.word	0x40010000
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	40010c00 	.word	0x40010c00
 8000d70:	40011000 	.word	0x40011000
 8000d74:	40011400 	.word	0x40011400
 8000d78:	40010400 	.word	0x40010400
				} else {
					CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <HAL_GPIO_Init+0x304>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	4909      	ldr	r1, [pc, #36]	@ (8000dac <HAL_GPIO_Init+0x304>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]
				}
			}
		}

		position++;
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d96:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f47f ae8e 	bne.w	8000abc <HAL_GPIO_Init+0x14>
	}
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	372c      	adds	r7, #44	@ 0x2c
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40010400 	.word	0x40010400

08000db0 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8000dc0:	787b      	ldrb	r3, [r7, #1]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	611a      	str	r2, [r3, #16]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
	}
}
 8000dcc:	e003      	b.n	8000dd6 <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	041a      	lsls	r2, r3, #16
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	611a      	str	r2, [r3, #16]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <HAL_GPIO_EXTI_IRQHandler>:
/**
 * @brief  This function handles EXTI interrupt request.
 * @param  GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u) {
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	4013      	ands	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f806 	bl	8000e10 <HAL_GPIO_EXTI_Callback>
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010400 	.word	0x40010400

08000e10 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callbacks.
 * @param  GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	80fb      	strh	r3, [r7, #6]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
	 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e272      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8087 	beq.w	8000f52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e44:	4b92      	ldr	r3, [pc, #584]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d00c      	beq.n	8000e6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e50:	4b8f      	ldr	r3, [pc, #572]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d112      	bne.n	8000e82 <HAL_RCC_OscConfig+0x5e>
 8000e5c:	4b8c      	ldr	r3, [pc, #560]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e68:	d10b      	bne.n	8000e82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6a:	4b89      	ldr	r3, [pc, #548]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d06c      	beq.n	8000f50 <HAL_RCC_OscConfig+0x12c>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d168      	bne.n	8000f50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e24c      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e8a:	d106      	bne.n	8000e9a <HAL_RCC_OscConfig+0x76>
 8000e8c:	4b80      	ldr	r3, [pc, #512]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a7f      	ldr	r2, [pc, #508]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e02e      	b.n	8000ef8 <HAL_RCC_OscConfig+0xd4>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x98>
 8000ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a7a      	ldr	r2, [pc, #488]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b78      	ldr	r3, [pc, #480]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a77      	ldr	r2, [pc, #476]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e01d      	b.n	8000ef8 <HAL_RCC_OscConfig+0xd4>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0xbc>
 8000ec6:	4b72      	ldr	r3, [pc, #456]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a71      	ldr	r2, [pc, #452]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e00b      	b.n	8000ef8 <HAL_RCC_OscConfig+0xd4>
 8000ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a6a      	ldr	r2, [pc, #424]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b68      	ldr	r3, [pc, #416]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a67      	ldr	r2, [pc, #412]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f00:	f7ff fc08 	bl	8000714 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f08:	f7ff fc04 	bl	8000714 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	@ 0x64
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e200      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f0      	beq.n	8000f08 <HAL_RCC_OscConfig+0xe4>
 8000f26:	e014      	b.n	8000f52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fbf4 	bl	8000714 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fbf0 	bl	8000714 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	@ 0x64
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e1ec      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f42:	4b53      	ldr	r3, [pc, #332]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f0      	bne.n	8000f30 <HAL_RCC_OscConfig+0x10c>
 8000f4e:	e000      	b.n	8000f52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d063      	beq.n	8001026 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 030c 	and.w	r3, r3, #12
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00b      	beq.n	8000f82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f6a:	4b49      	ldr	r3, [pc, #292]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d11c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x18c>
 8000f76:	4b46      	ldr	r3, [pc, #280]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d116      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f82:	4b43      	ldr	r3, [pc, #268]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <HAL_RCC_OscConfig+0x176>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d001      	beq.n	8000f9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e1c0      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4939      	ldr	r1, [pc, #228]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fae:	e03a      	b.n	8001026 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d020      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb8:	4b36      	ldr	r3, [pc, #216]	@ (8001094 <HAL_RCC_OscConfig+0x270>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fba9 	bl	8000714 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc6:	f7ff fba5 	bl	8000714 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e1a1      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4927      	ldr	r1, [pc, #156]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	600b      	str	r3, [r1, #0]
 8000ff8:	e015      	b.n	8001026 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <HAL_RCC_OscConfig+0x270>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fb88 	bl	8000714 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001008:	f7ff fb84 	bl	8000714 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e180      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101a:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d03a      	beq.n	80010a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d019      	beq.n	800106e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <HAL_RCC_OscConfig+0x274>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001040:	f7ff fb68 	bl	8000714 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001048:	f7ff fb64 	bl	8000714 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e160      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <HAL_RCC_OscConfig+0x26c>)
 800105c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001066:	2001      	movs	r0, #1
 8001068:	f000 face 	bl	8001608 <RCC_Delay>
 800106c:	e01c      	b.n	80010a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_RCC_OscConfig+0x274>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001074:	f7ff fb4e 	bl	8000714 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800107a:	e00f      	b.n	800109c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800107c:	f7ff fb4a 	bl	8000714 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d908      	bls.n	800109c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e146      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	42420000 	.word	0x42420000
 8001098:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800109c:	4b92      	ldr	r3, [pc, #584]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1e9      	bne.n	800107c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80a6 	beq.w	8001202 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ba:	4b8b      	ldr	r3, [pc, #556]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10d      	bne.n	80010e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b88      	ldr	r3, [pc, #544]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a87      	ldr	r2, [pc, #540]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b85      	ldr	r3, [pc, #532]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010de:	2301      	movs	r3, #1
 80010e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e2:	4b82      	ldr	r3, [pc, #520]	@ (80012ec <HAL_RCC_OscConfig+0x4c8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ee:	4b7f      	ldr	r3, [pc, #508]	@ (80012ec <HAL_RCC_OscConfig+0x4c8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a7e      	ldr	r2, [pc, #504]	@ (80012ec <HAL_RCC_OscConfig+0x4c8>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010fa:	f7ff fb0b 	bl	8000714 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001102:	f7ff fb07 	bl	8000714 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b64      	cmp	r3, #100	@ 0x64
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e103      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001114:	4b75      	ldr	r3, [pc, #468]	@ (80012ec <HAL_RCC_OscConfig+0x4c8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d106      	bne.n	8001136 <HAL_RCC_OscConfig+0x312>
 8001128:	4b6f      	ldr	r3, [pc, #444]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a6e      	ldr	r2, [pc, #440]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6213      	str	r3, [r2, #32]
 8001134:	e02d      	b.n	8001192 <HAL_RCC_OscConfig+0x36e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x334>
 800113e:	4b6a      	ldr	r3, [pc, #424]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a69      	ldr	r2, [pc, #420]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	f023 0301 	bic.w	r3, r3, #1
 8001148:	6213      	str	r3, [r2, #32]
 800114a:	4b67      	ldr	r3, [pc, #412]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4a66      	ldr	r2, [pc, #408]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	f023 0304 	bic.w	r3, r3, #4
 8001154:	6213      	str	r3, [r2, #32]
 8001156:	e01c      	b.n	8001192 <HAL_RCC_OscConfig+0x36e>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b05      	cmp	r3, #5
 800115e:	d10c      	bne.n	800117a <HAL_RCC_OscConfig+0x356>
 8001160:	4b61      	ldr	r3, [pc, #388]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	4a60      	ldr	r2, [pc, #384]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6213      	str	r3, [r2, #32]
 800116c:	4b5e      	ldr	r3, [pc, #376]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4a5d      	ldr	r2, [pc, #372]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6213      	str	r3, [r2, #32]
 8001178:	e00b      	b.n	8001192 <HAL_RCC_OscConfig+0x36e>
 800117a:	4b5b      	ldr	r3, [pc, #364]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a5a      	ldr	r2, [pc, #360]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	f023 0301 	bic.w	r3, r3, #1
 8001184:	6213      	str	r3, [r2, #32]
 8001186:	4b58      	ldr	r3, [pc, #352]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	4a57      	ldr	r2, [pc, #348]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	f023 0304 	bic.w	r3, r3, #4
 8001190:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d015      	beq.n	80011c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119a:	f7ff fabb 	bl	8000714 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a2:	f7ff fab7 	bl	8000714 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e0b1      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b8:	4b4b      	ldr	r3, [pc, #300]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0ee      	beq.n	80011a2 <HAL_RCC_OscConfig+0x37e>
 80011c4:	e014      	b.n	80011f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c6:	f7ff faa5 	bl	8000714 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011cc:	e00a      	b.n	80011e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f7ff faa1 	bl	8000714 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011dc:	4293      	cmp	r3, r2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e09b      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e4:	4b40      	ldr	r3, [pc, #256]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1ee      	bne.n	80011ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d105      	bne.n	8001202 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f6:	4b3c      	ldr	r3, [pc, #240]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a3b      	ldr	r2, [pc, #236]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001200:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8087 	beq.w	800131a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800120c:	4b36      	ldr	r3, [pc, #216]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b08      	cmp	r3, #8
 8001216:	d061      	beq.n	80012dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d146      	bne.n	80012ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001220:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <HAL_RCC_OscConfig+0x4cc>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001226:	f7ff fa75 	bl	8000714 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122e:	f7ff fa71 	bl	8000714 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e06d      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001240:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f0      	bne.n	800122e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001254:	d108      	bne.n	8001268 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4921      	ldr	r1, [pc, #132]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a19      	ldr	r1, [r3, #32]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001278:	430b      	orrs	r3, r1
 800127a:	491b      	ldr	r1, [pc, #108]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <HAL_RCC_OscConfig+0x4cc>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fa45 	bl	8000714 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128e:	f7ff fa41 	bl	8000714 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e03d      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x46a>
 80012ac:	e035      	b.n	800131a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <HAL_RCC_OscConfig+0x4cc>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fa2e 	bl	8000714 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012bc:	f7ff fa2a 	bl	8000714 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e026      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x498>
 80012da:	e01e      	b.n	800131a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d107      	bne.n	80012f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e019      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40007000 	.word	0x40007000
 80012f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_RCC_OscConfig+0x500>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	429a      	cmp	r2, r3
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001312:	429a      	cmp	r2, r3
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e0d0      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800133c:	4b6a      	ldr	r3, [pc, #424]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d910      	bls.n	800136c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b67      	ldr	r3, [pc, #412]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 0207 	bic.w	r2, r3, #7
 8001352:	4965      	ldr	r1, [pc, #404]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b63      	ldr	r3, [pc, #396]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0b8      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001384:	4b59      	ldr	r3, [pc, #356]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a58      	ldr	r2, [pc, #352]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800138e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800139c:	4b53      	ldr	r3, [pc, #332]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a52      	ldr	r2, [pc, #328]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80013a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a8:	4b50      	ldr	r3, [pc, #320]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	494d      	ldr	r1, [pc, #308]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d040      	beq.n	8001448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b47      	ldr	r3, [pc, #284]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d115      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e07f      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e6:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e073      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f6:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e06b      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001406:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f023 0203 	bic.w	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4936      	ldr	r1, [pc, #216]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001418:	f7ff f97c 	bl	8000714 <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141e:	e00a      	b.n	8001436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001420:	f7ff f978 	bl	8000714 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e053      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 020c 	and.w	r2, r3, #12
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	429a      	cmp	r2, r3
 8001446:	d1eb      	bne.n	8001420 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001448:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d210      	bcs.n	8001478 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 0207 	bic.w	r2, r3, #7
 800145e:	4922      	ldr	r1, [pc, #136]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e032      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001484:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4916      	ldr	r1, [pc, #88]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014a2:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	490e      	ldr	r1, [pc, #56]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014b6:	f000 f821 	bl	80014fc <HAL_RCC_GetSysClockFreq>
 80014ba:	4602      	mov	r2, r0
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	490a      	ldr	r1, [pc, #40]	@ (80014f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014c8:	5ccb      	ldrb	r3, [r1, r3]
 80014ca:	fa22 f303 	lsr.w	r3, r2, r3
 80014ce:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <HAL_RCC_ClockConfig+0x1cc>)
 80014d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <HAL_RCC_ClockConfig+0x1d0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f8da 	bl	8000690 <HAL_InitTick>

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	08002500 	.word	0x08002500
 80014f4:	20000004 	.word	0x20000004
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001516:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x94>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b04      	cmp	r3, #4
 8001524:	d002      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x30>
 8001526:	2b08      	cmp	r3, #8
 8001528:	d003      	beq.n	8001532 <HAL_RCC_GetSysClockFreq+0x36>
 800152a:	e027      	b.n	800157c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x98>)
 800152e:	613b      	str	r3, [r7, #16]
      break;
 8001530:	e027      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	0c9b      	lsrs	r3, r3, #18
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	4a17      	ldr	r2, [pc, #92]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x9c>)
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d010      	beq.n	800156c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x94>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	0c5b      	lsrs	r3, r3, #17
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	4a11      	ldr	r2, [pc, #68]	@ (800159c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x98>)
 800155e:	fb03 f202 	mul.w	r2, r3, r2
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e004      	b.n	8001576 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	613b      	str	r3, [r7, #16]
      break;
 800157a:	e002      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x98>)
 800157e:	613b      	str	r3, [r7, #16]
      break;
 8001580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001582:	693b      	ldr	r3, [r7, #16]
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	007a1200 	.word	0x007a1200
 8001598:	08002518 	.word	0x08002518
 800159c:	08002528 	.word	0x08002528
 80015a0:	003d0900 	.word	0x003d0900

080015a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a8:	4b02      	ldr	r3, [pc, #8]	@ (80015b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000004 	.word	0x20000004

080015b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015bc:	f7ff fff2 	bl	80015a4 <HAL_RCC_GetHCLKFreq>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	4903      	ldr	r1, [pc, #12]	@ (80015dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ce:	5ccb      	ldrb	r3, [r1, r3]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	08002510 	.word	0x08002510

080015e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015e4:	f7ff ffde 	bl	80015a4 <HAL_RCC_GetHCLKFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	0adb      	lsrs	r3, r3, #11
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	4903      	ldr	r1, [pc, #12]	@ (8001604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	08002510 	.word	0x08002510

08001608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001610:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <RCC_Delay+0x34>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <RCC_Delay+0x38>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0a5b      	lsrs	r3, r3, #9
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001624:	bf00      	nop
  }
  while (Delay --);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	60fa      	str	r2, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f9      	bne.n	8001624 <RCC_Delay+0x1c>
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000004 	.word	0x20000004
 8001640:	10624dd3 	.word	0x10624dd3

08001644 <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_UART_Init+0x12>
		return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e042      	b.n	80016dc <HAL_UART_Init+0x98>
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

	if (huart->gState == HAL_UART_STATE_RESET) {
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_UART_Init+0x2c>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe ff10 	bl	8000490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2224      	movs	r2, #36	@ 0x24
 8001674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	/* Disable the peripheral */
	__HAL_UART_DISABLE(huart);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001686:	60da      	str	r2, [r3, #12]

	/* Set the UART Communication parameters */
	UART_SetConfig(huart);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 fe5f 	bl	800234c <UART_SetConfig>

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800169c:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80016ac:	615a      	str	r2, [r3, #20]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	/* Enable the peripheral */
	__HAL_UART_ENABLE(huart);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016bc:	60da      	str	r2, [r3, #12]

	/* Initialize the UART state */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	645a      	str	r2, [r3, #68]	@ 0x44
	huart->gState = HAL_UART_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	huart->RxState = HAL_UART_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2220      	movs	r2, #32
 80016d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	635a      	str	r2, [r3, #52]	@ 0x34

	return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_UART_Transmit>:
 * @param  Size  Amount of data elements (u8 or u16) to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart,
		const uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	80fb      	strh	r3, [r7, #6]
	const uint8_t *pdata8bits;
	const uint16_t *pdata16bits;
	uint32_t tickstart = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

	/* Check that a Tx process is not already ongoing */
	if (huart->gState == HAL_UART_STATE_READY) {
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b20      	cmp	r3, #32
 8001702:	d16d      	bne.n	80017e0 <HAL_UART_Transmit+0xfc>
		if ((pData == NULL) || (Size == 0U)) {
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <HAL_UART_Transmit+0x2c>
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_UART_Transmit+0x30>
			return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e066      	b.n	80017e2 <HAL_UART_Transmit+0xfe>
		}

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	645a      	str	r2, [r3, #68]	@ 0x44
		huart->gState = HAL_UART_STATE_BUSY_TX;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2221      	movs	r2, #33	@ 0x21
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 8001722:	f7fe fff7 	bl	8000714 <HAL_GetTick>
 8001726:	6178      	str	r0, [r7, #20]

		huart->TxXferSize = Size;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	88fa      	ldrh	r2, [r7, #6]
 800172c:	849a      	strh	r2, [r3, #36]	@ 0x24
		huart->TxXferCount = Size;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	88fa      	ldrh	r2, [r7, #6]
 8001732:	84da      	strh	r2, [r3, #38]	@ 0x26

		/* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800173c:	d108      	bne.n	8001750 <HAL_UART_Transmit+0x6c>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d104      	bne.n	8001750 <HAL_UART_Transmit+0x6c>
			pdata8bits = NULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
			pdata16bits = (const uint16_t*) pData;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	e003      	b.n	8001758 <HAL_UART_Transmit+0x74>
		} else {
			pdata8bits = pData;
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
		}

		while (huart->TxXferCount > 0U) {
 8001758:	e02a      	b.n	80017b0 <HAL_UART_Transmit+0xcc>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2200      	movs	r2, #0
 8001762:	2180      	movs	r1, #128	@ 0x80
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 fbaf 	bl	8001ec8 <UART_WaitOnFlagUntilTimeout>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_UART_Transmit+0x90>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e036      	b.n	80017e2 <HAL_UART_Transmit+0xfe>
			}
			if (pdata8bits == NULL) {
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10b      	bne.n	8001792 <HAL_UART_Transmit+0xae>
				huart->Instance->DR = (uint16_t) (*pdata16bits & 0x01FFU);
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001788:	605a      	str	r2, [r3, #4]
				pdata16bits++;
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	3302      	adds	r3, #2
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	e007      	b.n	80017a2 <HAL_UART_Transmit+0xbe>
			} else {
				huart->Instance->DR = (uint8_t) (*pdata8bits & 0xFFU);
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
				pdata8bits++;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	3301      	adds	r3, #1
 80017a0:	61fb      	str	r3, [r7, #28]
			}
			huart->TxXferCount--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	84da      	strh	r2, [r3, #38]	@ 0x26
		while (huart->TxXferCount > 0U) {
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1cf      	bne.n	800175a <HAL_UART_Transmit+0x76>
		}

		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2200      	movs	r2, #0
 80017c2:	2140      	movs	r1, #64	@ 0x40
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 fb7f 	bl	8001ec8 <UART_WaitOnFlagUntilTimeout>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_UART_Transmit+0xf0>
				Timeout) != HAL_OK) {
			return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e006      	b.n	80017e2 <HAL_UART_Transmit+0xfe>
		}

		/* At end of Tx process, restore huart->gState to Ready */
		huart->gState = HAL_UART_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		return HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	e000      	b.n	80017e2 <HAL_UART_Transmit+0xfe>
	} else {
		return HAL_BUSY;
 80017e0:	2302      	movs	r3, #2
	}
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_UART_Receive>:
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b08a      	sub	sp, #40	@ 0x28
 80017ee:	af02      	add	r7, sp, #8
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	80fb      	strh	r3, [r7, #6]
	uint8_t *pdata8bits;
	uint16_t *pdata16bits;
	uint32_t tickstart = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b20      	cmp	r3, #32
 8001808:	d17c      	bne.n	8001904 <HAL_UART_Receive+0x11a>
		if ((pData == NULL) || (Size == 0U)) {
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <HAL_UART_Receive+0x2c>
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_UART_Receive+0x30>
			return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e075      	b.n	8001906 <HAL_UART_Receive+0x11c>
		}

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	645a      	str	r2, [r3, #68]	@ 0x44
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2222      	movs	r2, #34	@ 0x22
 8001824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 800182e:	f7fe ff71 	bl	8000714 <HAL_GetTick>
 8001832:	6178      	str	r0, [r7, #20]

		huart->RxXferSize = Size;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	88fa      	ldrh	r2, [r7, #6]
 8001838:	859a      	strh	r2, [r3, #44]	@ 0x2c
		huart->RxXferCount = Size;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	88fa      	ldrh	r2, [r7, #6]
 800183e:	85da      	strh	r2, [r3, #46]	@ 0x2e

		/* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001848:	d108      	bne.n	800185c <HAL_UART_Receive+0x72>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d104      	bne.n	800185c <HAL_UART_Receive+0x72>
			pdata8bits = NULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
			pdata16bits = (uint16_t*) pData;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	e003      	b.n	8001864 <HAL_UART_Receive+0x7a>
		} else {
			pdata8bits = pData;
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
		}

		/* Check the remain data to be received */
		while (huart->RxXferCount > 0U) {
 8001864:	e043      	b.n	80018ee <HAL_UART_Receive+0x104>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2200      	movs	r2, #0
 800186e:	2120      	movs	r1, #32
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 fb29 	bl	8001ec8 <UART_WaitOnFlagUntilTimeout>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_UART_Receive+0x96>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e042      	b.n	8001906 <HAL_UART_Receive+0x11c>
			}
			if (pdata8bits == NULL) {
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <HAL_UART_Receive+0xb6>
				*pdata16bits = (uint16_t) (huart->Instance->DR & 0x01FF);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	b29b      	uxth	r3, r3
 800188e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001892:	b29a      	uxth	r2, r3
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	801a      	strh	r2, [r3, #0]
				pdata16bits++;
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	3302      	adds	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	e01f      	b.n	80018e0 <HAL_UART_Receive+0xf6>
			} else {
				if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018a8:	d007      	beq.n	80018ba <HAL_UART_Receive+0xd0>
						|| ((huart->Init.WordLength == UART_WORDLENGTH_8B)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10a      	bne.n	80018c8 <HAL_UART_Receive+0xde>
								&& (huart->Init.Parity == UART_PARITY_NONE))) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_UART_Receive+0xde>
					*pdata8bits = (uint8_t) (huart->Instance->DR
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	e008      	b.n	80018da <HAL_UART_Receive+0xf0>
							& (uint8_t) 0x00FF);
				} else {
					*pdata8bits = (uint8_t) (huart->Instance->DR
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	701a      	strb	r2, [r3, #0]
							& (uint8_t) 0x007F);
				}
				pdata8bits++;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3301      	adds	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
			}
			huart->RxXferCount--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
		while (huart->RxXferCount > 0U) {
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1b6      	bne.n	8001866 <HAL_UART_Receive+0x7c>
		}

		/* At end of Rx process, restore huart->RxState to Ready */
		huart->RxState = HAL_UART_STATE_READY;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2220      	movs	r2, #32
 80018fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

		return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e000      	b.n	8001906 <HAL_UART_Receive+0x11c>
	} else {
		return HAL_BUSY;
 8001904:	2302      	movs	r3, #2
	}
}
 8001906:	4618      	mov	r0, r3
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_UART_Receive_IT>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData,
		uint16_t Size) {
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	4613      	mov	r3, r2
 800191a:	80fb      	strh	r3, [r7, #6]
	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b20      	cmp	r3, #32
 8001926:	d112      	bne.n	800194e <HAL_UART_Receive_IT+0x40>
		if ((pData == NULL) || (Size == 0U)) {
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_UART_Receive_IT+0x26>
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_UART_Receive_IT+0x2a>
			return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e00b      	b.n	8001950 <HAL_UART_Receive_IT+0x42>
		}

		/* Set Reception type to Standard reception */
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	631a      	str	r2, [r3, #48]	@ 0x30

		return (UART_Start_Receive_IT(huart, pData, Size));
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	461a      	mov	r2, r3
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 fb2d 	bl	8001fa4 <UART_Start_Receive_IT>
 800194a:	4603      	mov	r3, r0
 800194c:	e000      	b.n	8001950 <HAL_UART_Receive_IT+0x42>
	} else {
		return HAL_BUSY;
 800194e:	2302      	movs	r3, #2
	}
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_UART_IRQHandler>:
 * @brief  This function handles UART interrupt request.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b0ba      	sub	sp, #232	@ 0xe8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	uint32_t errorflags = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	uint32_t dmarequest = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	/* If no error occurs */
	errorflags =
 800198a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			(isrflags
					& (uint32_t) (USART_SR_PE | USART_SR_FE | USART_SR_ORE
							| USART_SR_NE));
	if (errorflags == RESET) {
 8001996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10f      	bne.n	80019be <HAL_UART_IRQHandler+0x66>
		/* UART in mode Receiver -------------------------------------------------*/
		if (((isrflags & USART_SR_RXNE) != RESET)
 800199e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d009      	beq.n	80019be <HAL_UART_IRQHandler+0x66>
				&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 80019aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80019ae:	f003 0320 	and.w	r3, r3, #32
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_UART_IRQHandler+0x66>
			UART_Receive_IT(huart);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fc0a 	bl	80021d0 <UART_Receive_IT>
			return;
 80019bc:	e25b      	b.n	8001e76 <HAL_UART_IRQHandler+0x51e>
		}
	}

	/* If some errors occur */
	if ((errorflags != RESET)
 80019be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80de 	beq.w	8001b84 <HAL_UART_IRQHandler+0x22c>
			&& (((cr3its & USART_CR3_EIE) != RESET)
 80019c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d106      	bne.n	80019e2 <HAL_UART_IRQHandler+0x8a>
					|| ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 80019d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80019d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80d1 	beq.w	8001b84 <HAL_UART_IRQHandler+0x22c>
		/* UART parity error interrupt occurred ----------------------------------*/
		if (((isrflags & USART_SR_PE) != RESET)
 80019e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_UART_IRQHandler+0xae>
				&& ((cr1its & USART_CR1_PEIE) != RESET)) {
 80019ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80019f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_UART_IRQHandler+0xae>
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	645a      	str	r2, [r3, #68]	@ 0x44
		}

		/* UART noise error interrupt occurred -----------------------------------*/
		if (((isrflags & USART_SR_NE) != RESET)
 8001a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <HAL_UART_IRQHandler+0xd2>
				&& ((cr3its & USART_CR3_EIE) != RESET)) {
 8001a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_UART_IRQHandler+0xd2>
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f043 0202 	orr.w	r2, r3, #2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	645a      	str	r2, [r3, #68]	@ 0x44
		}

		/* UART frame error interrupt occurred -----------------------------------*/
		if (((isrflags & USART_SR_FE) != RESET)
 8001a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <HAL_UART_IRQHandler+0xf6>
				&& ((cr3its & USART_CR3_EIE) != RESET)) {
 8001a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_UART_IRQHandler+0xf6>
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	f043 0204 	orr.w	r2, r3, #4
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	645a      	str	r2, [r3, #68]	@ 0x44
		}

		/* UART Over-Run interrupt occurred --------------------------------------*/
		if (((isrflags & USART_SR_ORE) != RESET)
 8001a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d011      	beq.n	8001a7e <HAL_UART_IRQHandler+0x126>
				&& (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <HAL_UART_IRQHandler+0x11a>
						|| ((cr3its & USART_CR3_EIE) != RESET))) {
 8001a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_UART_IRQHandler+0x126>
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f043 0208 	orr.w	r2, r3, #8
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	645a      	str	r2, [r3, #68]	@ 0x44
		}

		/* Call UART Error Call back function if need be --------------------------*/
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 81f2 	beq.w	8001e6c <HAL_UART_IRQHandler+0x514>
			/* UART in mode Receiver -----------------------------------------------*/
			if (((isrflags & USART_SR_RXNE) != RESET)
 8001a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a8c:	f003 0320 	and.w	r3, r3, #32
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_UART_IRQHandler+0x14e>
					&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8001a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a98:	f003 0320 	and.w	r3, r3, #32
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_UART_IRQHandler+0x14e>
				UART_Receive_IT(huart);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fb95 	bl	80021d0 <UART_Receive_IT>
			}

			/* If Overrun error occurs, or if any error occurs in DMA mode reception,
			 consider error as blocking */
			dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <HAL_UART_IRQHandler+0x17a>
					|| dmarequest) {
 8001aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d04f      	beq.n	8001b72 <HAL_UART_IRQHandler+0x21a>
				/* Blocking error : transfer is aborted
				 Set the UART state ready to be able to start again the process,
				 Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
				UART_EndRxTransfer(huart);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 fa9f 	bl	8002016 <UART_EndRxTransfer>

				/* Disable the UART DMA Rx request if enabled */
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d041      	beq.n	8001b6a <HAL_UART_IRQHandler+0x212>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3314      	adds	r3, #20
 8001aec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001af4:	e853 3f00 	ldrex	r3, [r3]
 8001af8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001b04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3314      	adds	r3, #20
 8001b0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001b12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001b16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001b1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001b22:	e841 2300 	strex	r3, r2, [r1]
 8001b26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1d9      	bne.n	8001ae6 <HAL_UART_IRQHandler+0x18e>

					/* Abort the UART DMA Rx channel */
					if (huart->hdmarx != NULL) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d013      	beq.n	8001b62 <HAL_UART_IRQHandler+0x20a>
						/* Set the UART DMA Abort callback :
						 will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d38 <HAL_UART_IRQHandler+0x3e0>)
 8001b40:	635a      	str	r2, [r3, #52]	@ 0x34
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe ff36 	bl	80009b8 <HAL_DMA_Abort_IT>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d016      	beq.n	8001b80 <HAL_UART_IRQHandler+0x228>
							/* Call Directly XferAbortCallback function in case of error */
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4798      	blx	r3
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8001b60:	e00e      	b.n	8001b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
						/*Call legacy weak error callback*/
						HAL_UART_ErrorCallback(huart);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f99c 	bl	8001ea0 <HAL_UART_ErrorCallback>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8001b68:	e00a      	b.n	8001b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
					/*Call legacy weak error callback*/
					HAL_UART_ErrorCallback(huart);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f998 	bl	8001ea0 <HAL_UART_ErrorCallback>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8001b70:	e006      	b.n	8001b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
				/*Call legacy weak error callback*/
				HAL_UART_ErrorCallback(huart);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f994 	bl	8001ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	645a      	str	r2, [r3, #68]	@ 0x44
			}
		}
		return;
 8001b7e:	e175      	b.n	8001e6c <HAL_UART_IRQHandler+0x514>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8001b80:	bf00      	nop
		return;
 8001b82:	e173      	b.n	8001e6c <HAL_UART_IRQHandler+0x514>
	} /* End if some error occurs */

	/* Check current reception Mode :
	 If Reception till IDLE event has been selected : */
	if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	f040 814f 	bne.w	8001e2c <HAL_UART_IRQHandler+0x4d4>
			&& ((isrflags & USART_SR_IDLE) != 0U)
 8001b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8148 	beq.w	8001e2c <HAL_UART_IRQHandler+0x4d4>
			&& ((cr1its & USART_SR_IDLE) != 0U)) {
 8001b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 8141 	beq.w	8001e2c <HAL_UART_IRQHandler+0x4d4>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]

		/* Check if DMA mode is enabled in UART */
		if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80b6 	beq.w	8001d3c <HAL_UART_IRQHandler+0x3e4>
			/* DMA mode enabled */
			/* Check received length : If all expected data are received, do nothing,
			 (DMA cplt callback will be called).
			 Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
			uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
					huart->hdmarx);
			if ((nb_remaining_rx_data > 0U)
 8001bdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8145 	beq.w	8001e70 <HAL_UART_IRQHandler+0x518>
					&& (nb_remaining_rx_data < huart->RxXferSize)) {
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	f080 813e 	bcs.w	8001e70 <HAL_UART_IRQHandler+0x518>
				/* Reception is not complete */
				huart->RxXferCount = nb_remaining_rx_data;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001bfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

				/* In Normal mode, end DMA xfer and HAL UART Rx process*/
				if (huart->hdmarx->Init.Mode != DMA_CIRCULAR) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	f000 8088 	beq.w	8001d18 <HAL_UART_IRQHandler+0x3c0>
					/* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	330c      	adds	r3, #12
 8001c0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c16:	e853 3f00 	ldrex	r3, [r3]
 8001c1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	330c      	adds	r3, #12
 8001c30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001c34:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001c38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001c40:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c44:	e841 2300 	strex	r3, r2, [r1]
 8001c48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1d9      	bne.n	8001c08 <HAL_UART_IRQHandler+0x2b0>
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3314      	adds	r3, #20
 8001c5a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c5e:	e853 3f00 	ldrex	r3, [r3]
 8001c62:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001c64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3314      	adds	r3, #20
 8001c74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c78:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001c7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c7e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001c80:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001c84:	e841 2300 	strex	r3, r2, [r1]
 8001c88:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001c8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e1      	bne.n	8001c54 <HAL_UART_IRQHandler+0x2fc>

					/* Disable the DMA transfer for the receiver request by resetting the DMAR bit
					 in the UART CR3 register */
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3314      	adds	r3, #20
 8001c96:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c9a:	e853 3f00 	ldrex	r3, [r3]
 8001c9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001ca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3314      	adds	r3, #20
 8001cb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001cb4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001cb6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cb8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001cba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001cbc:	e841 2300 	strex	r3, r2, [r1]
 8001cc0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001cc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e3      	bne.n	8001c90 <HAL_UART_IRQHandler+0x338>

					/* At end of Rx process, restore huart->RxState to Ready */
					huart->RxState = HAL_UART_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
					huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	@ 0x30

					ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	330c      	adds	r3, #12
 8001cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ce0:	e853 3f00 	ldrex	r3, [r3]
 8001ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ce8:	f023 0310 	bic.w	r3, r3, #16
 8001cec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	330c      	adds	r3, #12
 8001cf6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001cfa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001cfc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d02:	e841 2300 	strex	r3, r2, [r1]
 8001d06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1e3      	bne.n	8001cd6 <HAL_UART_IRQHandler+0x37e>

					/* Last bytes received, so no need as the abort is immediate */
					(void) HAL_DMA_Abort(huart->hdmarx);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fe15 	bl	8000942 <HAL_DMA_Abort>
				}

				/* Initialize type of RxEvent that correspond to RxEvent callback execution;
				 In this case, Rx Event type is Idle Event */
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	635a      	str	r2, [r3, #52]	@ 0x34
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
				/*Call legacy weak Rx Event callback*/
				HAL_UARTEx_RxEventCallback(huart,
						(huart->RxXferSize - huart->RxXferCount));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d26:	b29b      	uxth	r3, r3
				HAL_UARTEx_RxEventCallback(huart,
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8bf 	bl	8001eb2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
			}
			return;
 8001d34:	e09c      	b.n	8001e70 <HAL_UART_IRQHandler+0x518>
 8001d36:	bf00      	nop
 8001d38:	080020db 	.word	0x080020db
		} else {
			/* DMA mode not enabled */
			/* Check received length : If all expected data are received, do nothing.
			 Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
			uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
			if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 808e 	beq.w	8001e74 <HAL_UART_IRQHandler+0x51c>
 8001d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8089 	beq.w	8001e74 <HAL_UART_IRQHandler+0x51c>
				/* Disable the UART Parity Error Interrupt and RXNE interrupts */
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	330c      	adds	r3, #12
 8001d68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d6c:	e853 3f00 	ldrex	r3, [r3]
 8001d70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	330c      	adds	r3, #12
 8001d82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001d86:	647a      	str	r2, [r7, #68]	@ 0x44
 8001d88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001d8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d8e:	e841 2300 	strex	r3, r2, [r1]
 8001d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1e3      	bne.n	8001d62 <HAL_UART_IRQHandler+0x40a>
						(USART_CR1_RXNEIE | USART_CR1_PEIE));

				/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3314      	adds	r3, #20
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	e853 3f00 	ldrex	r3, [r3]
 8001da8:	623b      	str	r3, [r7, #32]
   return(result);
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3314      	adds	r3, #20
 8001dba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001dbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8001dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dc6:	e841 2300 	strex	r3, r2, [r1]
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1e3      	bne.n	8001d9a <HAL_UART_IRQHandler+0x442>

				/* Rx process is completed, restore huart->RxState to Ready */
				huart->RxState = HAL_UART_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	@ 0x30

				ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	330c      	adds	r3, #12
 8001de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	e853 3f00 	ldrex	r3, [r3]
 8001dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f023 0310 	bic.w	r3, r3, #16
 8001df6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	330c      	adds	r3, #12
 8001e00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001e04:	61fa      	str	r2, [r7, #28]
 8001e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e08:	69b9      	ldr	r1, [r7, #24]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	e841 2300 	strex	r3, r2, [r1]
 8001e10:	617b      	str	r3, [r7, #20]
   return(result);
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e3      	bne.n	8001de0 <HAL_UART_IRQHandler+0x488>

				/* Initialize type of RxEvent that correspond to RxEvent callback execution;
				 In this case, Rx Event type is Idle Event */
				huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
				/*Call legacy weak Rx Event callback*/
				HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001e22:	4619      	mov	r1, r3
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f844 	bl	8001eb2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
			}
			return;
 8001e2a:	e023      	b.n	8001e74 <HAL_UART_IRQHandler+0x51c>
		}
	}

	/* UART in mode Transmitter ------------------------------------------------*/
	if (((isrflags & USART_SR_TXE) != RESET)
 8001e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <HAL_UART_IRQHandler+0x4f4>
			&& ((cr1its & USART_CR1_TXEIE) != RESET)) {
 8001e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_UART_IRQHandler+0x4f4>
		UART_Transmit_IT(huart);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f95c 	bl	8002102 <UART_Transmit_IT>
		return;
 8001e4a:	e014      	b.n	8001e76 <HAL_UART_IRQHandler+0x51e>
	}

	/* UART in mode Transmitter end --------------------------------------------*/
	if (((isrflags & USART_SR_TC) != RESET)
 8001e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00e      	beq.n	8001e76 <HAL_UART_IRQHandler+0x51e>
			&& ((cr1its & USART_CR1_TCIE) != RESET)) {
 8001e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_UART_IRQHandler+0x51e>
		UART_EndTransmit_IT(huart);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f99b 	bl	80021a0 <UART_EndTransmit_IT>
		return;
 8001e6a:	e004      	b.n	8001e76 <HAL_UART_IRQHandler+0x51e>
		return;
 8001e6c:	bf00      	nop
 8001e6e:	e002      	b.n	8001e76 <HAL_UART_IRQHandler+0x51e>
			return;
 8001e70:	bf00      	nop
 8001e72:	e000      	b.n	8001e76 <HAL_UART_IRQHandler+0x51e>
			return;
 8001e74:	bf00      	nop
	}
}
 8001e76:	37e8      	adds	r7, #232	@ 0xe8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_UART_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_UART_TxCpltCallback could be implemented in the user file
	 */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_UART_RxCpltCallback could be implemented in the user file
	 */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_UART_ErrorCallback>:
 * @brief  UART error callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_UART_ErrorCallback could be implemented in the user file
	 */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_UARTEx_RxEventCallback>:
 * @param  huart UART handle
 * @param  Size  Number of data available in application reception buffer (indicates a position in
 *               reception buffer until which, data are available)
 * @retval None
 */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	807b      	strh	r3, [r7, #2]
	UNUSED(Size);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UARTEx_RxEventCallback can be implemented in the user file.
	 */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <UART_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b090      	sub	sp, #64	@ 0x40
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8001ed8:	e050      	b.n	8001f7c <UART_WaitOnFlagUntilTimeout+0xb4>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8001eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d04c      	beq.n	8001f7c <UART_WaitOnFlagUntilTimeout+0xb4>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 8001ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d007      	beq.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ee8:	f7fe fc14 	bl	8000714 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d241      	bcs.n	8001f7c <UART_WaitOnFlagUntilTimeout+0xb4>
				/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	330c      	adds	r3, #12
 8001efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f02:	e853 3f00 	ldrex	r3, [r3]
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	330c      	adds	r3, #12
 8001f16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f18:	637a      	str	r2, [r7, #52]	@ 0x34
 8001f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f20:	e841 2300 	strex	r3, r2, [r1]
 8001f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1e5      	bne.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0x30>
						(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3314      	adds	r3, #20
 8001f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	e853 3f00 	ldrex	r3, [r3]
 8001f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3314      	adds	r3, #20
 8001f4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f4c:	623a      	str	r2, [r7, #32]
 8001f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f50:	69f9      	ldr	r1, [r7, #28]
 8001f52:	6a3a      	ldr	r2, [r7, #32]
 8001f54:	e841 2300 	strex	r3, r2, [r1]
 8001f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1e5      	bne.n	8001f2c <UART_WaitOnFlagUntilTimeout+0x64>

				huart->gState = HAL_UART_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
				huart->RxState = HAL_UART_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

				/* Process Unlocked */
				__HAL_UNLOCK(huart);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

				return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e00f      	b.n	8001f9c <UART_WaitOnFlagUntilTimeout+0xd4>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4013      	ands	r3, r2
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d09f      	beq.n	8001eda <UART_WaitOnFlagUntilTimeout+0x12>
			}
		}
	}
	return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3740      	adds	r7, #64	@ 0x40
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <UART_Start_Receive_IT>:
 * @param  pData Pointer to data buffer (u8 or u16 data elements).
 * @param  Size  Amount of data elements (u8 or u16) to be received.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart,
		uint8_t *pData, uint16_t Size) {
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
	huart->pRxBuffPtr = pData;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	629a      	str	r2, [r3, #40]	@ 0x28
	huart->RxXferSize = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	859a      	strh	r2, [r3, #44]	@ 0x2c
	huart->RxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	85da      	strh	r2, [r3, #46]	@ 0x2e

	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	645a      	str	r2, [r3, #68]	@ 0x44
	huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2222      	movs	r2, #34	@ 0x22
 8001fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

	if (huart->Init.Parity != UART_PARITY_NONE) {
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <UART_Start_Receive_IT+0x46>
		/* Enable the UART Parity Error Interrupt */
		__HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fe8:	60da      	str	r2, [r3, #12]
	}

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0220 	orr.w	r2, r2, #32
 8002008:	60da      	str	r2, [r3, #12]

	return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <UART_EndRxTransfer>:
/**
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
 8002016:	b480      	push	{r7}
 8002018:	b095      	sub	sp, #84	@ 0x54
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	330c      	adds	r3, #12
 8002024:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002028:	e853 3f00 	ldrex	r3, [r3]
 800202c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800202e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	330c      	adds	r3, #12
 800203c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800203e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002040:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002042:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002044:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002046:	e841 2300 	strex	r3, r2, [r1]
 800204a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800204c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1e5      	bne.n	800201e <UART_EndRxTransfer+0x8>
	ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3314      	adds	r3, #20
 8002058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	e853 3f00 	ldrex	r3, [r3]
 8002060:	61fb      	str	r3, [r7, #28]
   return(result);
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3314      	adds	r3, #20
 8002070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002072:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002076:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800207a:	e841 2300 	strex	r3, r2, [r1]
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1e5      	bne.n	8002052 <UART_EndRxTransfer+0x3c>

	/* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	2b01      	cmp	r3, #1
 800208c:	d119      	bne.n	80020c2 <UART_EndRxTransfer+0xac>
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	330c      	adds	r3, #12
 8002094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	e853 3f00 	ldrex	r3, [r3]
 800209c:	60bb      	str	r3, [r7, #8]
   return(result);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f023 0310 	bic.w	r3, r3, #16
 80020a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	330c      	adds	r3, #12
 80020ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020ae:	61ba      	str	r2, [r7, #24]
 80020b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b2:	6979      	ldr	r1, [r7, #20]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	e841 2300 	strex	r3, r2, [r1]
 80020ba:	613b      	str	r3, [r7, #16]
   return(result);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1e5      	bne.n	800208e <UART_EndRxTransfer+0x78>
	}

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020d0:	bf00      	nop
 80020d2:	3754      	adds	r7, #84	@ 0x54
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <UART_DMAAbortOnError>:
 *         (To be called at end of DMA Abort procedure following error occurrence).
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart =
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e6:	60fb      	str	r3, [r7, #12]
			(UART_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
	huart->RxXferCount = 0x00U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
	huart->TxXferCount = 0x00U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
	/*Call legacy weak error callback*/
	HAL_UART_ErrorCallback(huart);
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff fed3 	bl	8001ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <UART_Transmit_IT>:
 * @brief  Sends an amount of data in non blocking mode.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart) {
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
	const uint16_t *tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b21      	cmp	r3, #33	@ 0x21
 8002114:	d13e      	bne.n	8002194 <UART_Transmit_IT+0x92>
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800211e:	d114      	bne.n	800214a <UART_Transmit_IT+0x48>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d110      	bne.n	800214a <UART_Transmit_IT+0x48>
			tmp = (const uint16_t*) huart->pTxBuffPtr;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	60fb      	str	r3, [r7, #12]
			huart->Instance->DR = (uint16_t) (*tmp & (uint16_t) 0x01FF);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800213c:	605a      	str	r2, [r3, #4]
			huart->pTxBuffPtr += 2U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	1c9a      	adds	r2, r3, #2
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	621a      	str	r2, [r3, #32]
 8002148:	e008      	b.n	800215c <UART_Transmit_IT+0x5a>
		} else {
			huart->Instance->DR = (uint8_t) (*huart->pTxBuffPtr++
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	1c59      	adds	r1, r3, #1
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6211      	str	r1, [r2, #32]
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
					& (uint8_t) 0x00FF);
		}

		if (--huart->TxXferCount == 0U) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29b      	uxth	r3, r3
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4619      	mov	r1, r3
 800216a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10f      	bne.n	8002190 <UART_Transmit_IT+0x8e>
			/* Disable the UART Transmit Data Register Empty Interrupt */
			__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800217e:	60da      	str	r2, [r3, #12]

			/* Enable the UART Transmit Complete Interrupt */
			__HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800218e:	60da      	str	r2, [r3, #12]
		}
		return HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	e000      	b.n	8002196 <UART_Transmit_IT+0x94>
	} else {
		return HAL_BUSY;
 8002194:	2302      	movs	r3, #2
	}
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <UART_EndTransmit_IT>:
 * @brief  Wraps up transmission in non blocking mode.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	/* Disable the UART Transmit Complete Interrupt */
	__HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021b6:	60da      	str	r2, [r3, #12]

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff fe5b 	bl	8001e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

	return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <UART_Receive_IT>:
 * @brief  Receives an amount of data in non blocking mode
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	@ 0x30
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	uint8_t *pdata8bits;
	uint16_t *pdata16bits;

	/* Check that a Rx process is ongoing */
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b22      	cmp	r3, #34	@ 0x22
 80021e2:	f040 80ae 	bne.w	8002342 <UART_Receive_IT+0x172>
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ee:	d117      	bne.n	8002220 <UART_Receive_IT+0x50>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d113      	bne.n	8002220 <UART_Receive_IT+0x50>
			pdata8bits = NULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			pdata16bits = (uint16_t*) huart->pRxBuffPtr;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
			*pdata16bits = (uint16_t) (huart->Instance->DR & (uint16_t) 0x01FF);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	b29b      	uxth	r3, r3
 800220a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800220e:	b29a      	uxth	r2, r3
 8002210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002212:	801a      	strh	r2, [r3, #0]
			huart->pRxBuffPtr += 2U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	1c9a      	adds	r2, r3, #2
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	@ 0x28
 800221e:	e026      	b.n	800226e <UART_Receive_IT+0x9e>
		} else {
			pdata8bits = (uint8_t*) huart->pRxBuffPtr;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
			pdata16bits = NULL;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	@ 0x28

			if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002232:	d007      	beq.n	8002244 <UART_Receive_IT+0x74>
					|| ((huart->Init.WordLength == UART_WORDLENGTH_8B)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10a      	bne.n	8002252 <UART_Receive_IT+0x82>
							&& (huart->Init.Parity == UART_PARITY_NONE))) {
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <UART_Receive_IT+0x82>
				*pdata8bits =
						(uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	b2da      	uxtb	r2, r3
				*pdata8bits =
 800224c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e008      	b.n	8002264 <UART_Receive_IT+0x94>
			} else {
				*pdata8bits =
						(uint8_t) (huart->Instance->DR & (uint8_t) 0x007F);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800225e:	b2da      	uxtb	r2, r3
				*pdata8bits =
 8002260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002262:	701a      	strb	r2, [r3, #0]
			}
			huart->pRxBuffPtr += 1U;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		if (--huart->RxXferCount == 0U) {
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29b      	uxth	r3, r3
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4619      	mov	r1, r3
 800227c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800227e:	2b00      	cmp	r3, #0
 8002280:	d15d      	bne.n	800233e <UART_Receive_IT+0x16e>
			/* Disable the UART Data Register not empty Interrupt */
			__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0220 	bic.w	r2, r2, #32
 8002290:	60da      	str	r2, [r3, #12]

			/* Disable the UART Parity Error Interrupt */
			__HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022a0:	60da      	str	r2, [r3, #12]

			/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	615a      	str	r2, [r3, #20]

			/* Rx process is completed, restore huart->RxState to Ready */
			huart->RxState = HAL_UART_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

			/* Initialize type of RxEvent to Transfer Complete */
			huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	635a      	str	r2, [r3, #52]	@ 0x34

			/* Check current reception Mode :
			 If Reception till IDLE event has been selected : */
			if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d135      	bne.n	8002334 <UART_Receive_IT+0x164>
				/* Set reception type to Standard */
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	631a      	str	r2, [r3, #48]	@ 0x30

				/* Disable IDLE interrupt */
				ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	330c      	adds	r3, #12
 80022d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	e853 3f00 	ldrex	r3, [r3]
 80022dc:	613b      	str	r3, [r7, #16]
   return(result);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f023 0310 	bic.w	r3, r3, #16
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	330c      	adds	r3, #12
 80022ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ee:	623a      	str	r2, [r7, #32]
 80022f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f2:	69f9      	ldr	r1, [r7, #28]
 80022f4:	6a3a      	ldr	r2, [r7, #32]
 80022f6:	e841 2300 	strex	r3, r2, [r1]
 80022fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1e5      	bne.n	80022ce <UART_Receive_IT+0xfe>

				/* Check if IDLE flag is set */
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b10      	cmp	r3, #16
 800230e:	d10a      	bne.n	8002326 <UART_Receive_IT+0x156>
					/* Clear IDLE flag in ISR */
					__HAL_UART_CLEAR_IDLEFLAG(huart);
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
				/*Call legacy weak Rx Event callback*/
				HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff fdc0 	bl	8001eb2 <HAL_UARTEx_RxEventCallback>
 8002332:	e002      	b.n	800233a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
				/*Call legacy weak Rx complete callback*/
				HAL_UART_RxCpltCallback(huart);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff fdaa 	bl	8001e8e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
			}

			return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e002      	b.n	8002344 <UART_Receive_IT+0x174>
		}
		return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e000      	b.n	8002344 <UART_Receive_IT+0x174>
	} else {
		return HAL_BUSY;
 8002342:	2302      	movs	r3, #2
	}
}
 8002344:	4618      	mov	r0, r3
 8002346:	3730      	adds	r7, #48	@ 0x30
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	assert_param(IS_UART_MODE(huart->Init.Mode));

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits
	 according to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	431a      	orrs	r2, r3
			| huart->Init.Mode;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8002378:	4313      	orrs	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
	MODIFY_REG(huart->Instance->CR1,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002386:	f023 030c 	bic.w	r3, r3, #12
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	430b      	orrs	r3, r1
 8002392:	60d3      	str	r3, [r2, #12]
			tmpreg);
#endif /* USART_CR1_OVER8 */

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE),
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	615a      	str	r2, [r3, #20]
			huart->Init.HwFlowCtl);

	if (huart->Instance == USART1) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002460 <UART_SetConfig+0x114>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d103      	bne.n	80023bc <UART_SetConfig+0x70>
		pclk = HAL_RCC_GetPCLK2Freq();
 80023b4:	f7ff f914 	bl	80015e0 <HAL_RCC_GetPCLK2Freq>
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	e002      	b.n	80023c2 <UART_SetConfig+0x76>
	} else {
		pclk = HAL_RCC_GetPCLK1Freq();
 80023bc:	f7ff f8fc 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
 80023c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
	huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	009a      	lsls	r2, r3, #2
 80023cc:	441a      	add	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	4a22      	ldr	r2, [pc, #136]	@ (8002464 <UART_SetConfig+0x118>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	0119      	lsls	r1, r3, #4
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009a      	lsls	r2, r3, #2
 80023ec:	441a      	add	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <UART_SetConfig+0x118>)
 80023fa:	fba3 0302 	umull	r0, r3, r3, r2
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2064      	movs	r0, #100	@ 0x64
 8002402:	fb00 f303 	mul.w	r3, r0, r3
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	3332      	adds	r3, #50	@ 0x32
 800240c:	4a15      	ldr	r2, [pc, #84]	@ (8002464 <UART_SetConfig+0x118>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002418:	4419      	add	r1, r3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	009a      	lsls	r2, r3, #2
 8002424:	441a      	add	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002430:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <UART_SetConfig+0x118>)
 8002432:	fba3 0302 	umull	r0, r3, r3, r2
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2064      	movs	r0, #100	@ 0x64
 800243a:	fb00 f303 	mul.w	r3, r0, r3
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	3332      	adds	r3, #50	@ 0x32
 8002444:	4a07      	ldr	r2, [pc, #28]	@ (8002464 <UART_SetConfig+0x118>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	f003 020f 	and.w	r2, r3, #15
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	440a      	add	r2, r1
 8002456:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40013800 	.word	0x40013800
 8002464:	51eb851f 	.word	0x51eb851f

08002468 <memset>:
 8002468:	4603      	mov	r3, r0
 800246a:	4402      	add	r2, r0
 800246c:	4293      	cmp	r3, r2
 800246e:	d100      	bne.n	8002472 <memset+0xa>
 8002470:	4770      	bx	lr
 8002472:	f803 1b01 	strb.w	r1, [r3], #1
 8002476:	e7f9      	b.n	800246c <memset+0x4>

08002478 <__libc_init_array>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	2600      	movs	r6, #0
 800247c:	4d0c      	ldr	r5, [pc, #48]	@ (80024b0 <__libc_init_array+0x38>)
 800247e:	4c0d      	ldr	r4, [pc, #52]	@ (80024b4 <__libc_init_array+0x3c>)
 8002480:	1b64      	subs	r4, r4, r5
 8002482:	10a4      	asrs	r4, r4, #2
 8002484:	42a6      	cmp	r6, r4
 8002486:	d109      	bne.n	800249c <__libc_init_array+0x24>
 8002488:	f000 f81a 	bl	80024c0 <_init>
 800248c:	2600      	movs	r6, #0
 800248e:	4d0a      	ldr	r5, [pc, #40]	@ (80024b8 <__libc_init_array+0x40>)
 8002490:	4c0a      	ldr	r4, [pc, #40]	@ (80024bc <__libc_init_array+0x44>)
 8002492:	1b64      	subs	r4, r4, r5
 8002494:	10a4      	asrs	r4, r4, #2
 8002496:	42a6      	cmp	r6, r4
 8002498:	d105      	bne.n	80024a6 <__libc_init_array+0x2e>
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a0:	4798      	blx	r3
 80024a2:	3601      	adds	r6, #1
 80024a4:	e7ee      	b.n	8002484 <__libc_init_array+0xc>
 80024a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024aa:	4798      	blx	r3
 80024ac:	3601      	adds	r6, #1
 80024ae:	e7f2      	b.n	8002496 <__libc_init_array+0x1e>
 80024b0:	0800252c 	.word	0x0800252c
 80024b4:	0800252c 	.word	0x0800252c
 80024b8:	0800252c 	.word	0x0800252c
 80024bc:	08002530 	.word	0x08002530

080024c0 <_init>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	bf00      	nop
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr

080024cc <_fini>:
 80024cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ce:	bf00      	nop
 80024d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d2:	bc08      	pop	{r3}
 80024d4:	469e      	mov	lr, r3
 80024d6:	4770      	bx	lr
